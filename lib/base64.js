/*┌─────────────────────────────────────────────┐
  │ Перевод из одной систему счисления в другую │
  └─────────────────────────────────────────────┘
// Переводим один символ из 64-ричной в 10-ричную систему счисления
// На входе (от A до /), на выходе (от 0 до 63)
    $.base64['64 → 10']('/'); // '63'
    
// Переводим число из 10-ричной в 64-ричную систему счисления
// На входе (от 0 до 63), на выходе (от A до /)
    $.base64['10 → 64'](63); // '/'
    
// Получаем позицию символа в строке в 10-ричной системе счисления (от 0 до 31)
// Данные будут взяти из переданной строки на основании первых 3 символов
    $.base64.getPosition('f4804294ecd0e0f08eab7690d2a6ee69'); // '20'
    
// Получаем один символ для авторизации в 64-ричной системе счисления (от A до /)
// Данные будут взяти из переданной строки на основании первых 5 символов
    $.base64.getAuthChar('f4804294ecd0e0f08eab7690d2a6ee69'); // 'U'
    
/*▄─────────────────────────────────────────▄
  █                                         █
  █  Работа с 64-ричной системой счисления  █
  █                                         █
  ▀─────────────────────────────────────────▀*/
$.base64 = class {
/*┌─────────────────┐
  │ Список символов │
  └─────────────────┘*/
    static alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    
/*┌─────────────────────────┐
  │ Список систем счисления │
  └─────────────────────────┘*/
    static list = {
        '10': new Map([...new Set(this.alphabet)].map((v, k) => [v, k])),
        '64': new Map([...new Set(this.alphabet)].map((v, k) => [k, v]))
    };
    
/*┌──────────────────────────────────────────────────────────────────┐
  │ Переводит один символ из 64-ричной в 10-ричную систему счисления │
  └──────────────────────────────────────────────────────────────────┘*/
    static '64 → 10' (number = 0) {
        return this.list[10].get(number);
    }
    
/*┌────────────────────────────────────────────────────────────┐
  │ Переводит число из 10-ричной в 64-ричную систему счисления │
  └────────────────────────────────────────────────────────────┘*/
    static '10 → 64' (number = 0) {
        return this.list[64].get(number);
    }
    
/*┌────────────────────────────────────────────────────────────────────────────────┐
  │ Возвращает позицию символа в строке в 10-ричной системе счисления (от 0 до 31) │
  └────────────────────────────────────────────────────────────────────────────────┘*/
    static getPosition(md5 = 'fff') {
    // Первая часть
        if (parseInt(md5[2], 16) < 8) {
            return parseInt(md5[0], 16);
        }
        
    // Вторая часть
        return parseInt(md5[1], 16) + 16;
    }
    
/*┌──────────────────────────────────────────────────────────────────────────────────┐
  │ Возвращает один символ для авторизации в 64-ричной системе счисления (от A до /) │
  └──────────────────────────────────────────────────────────────────────────────────┘*/
    static getAuthChar(md5 = 'fffff') {
    // Первая часть
        if (parseInt(md5[4], 16) < 4) {
            return $.base64['10 → 64'](parseInt(md5[0], 16));
        }
        
    // Вторая часть
        if (parseInt(md5[4], 16) < 8) {
            return $.base64['10 → 64'](parseInt(md5[1], 16) + 16);
        }
        
    // Третья часть
        if (parseInt(md5[4], 16) < 12) {
            return $.base64['10 → 64'](parseInt(md5[2], 16) + 32);
        }
        
    // Четвертая часть
        return $.base64['10 → 64'](parseInt(md5[3], 16) + 48);
    }
};
